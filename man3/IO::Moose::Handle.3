.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Moose::Handle 3"
.TH IO::Moose::Handle 3 "2009-10-29" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Moose::Handle \- Reimplementation of IO::Handle with improvements
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use IO::Moose::Handle;
\&
\&  my $fh = IO::Moose::Handle\->new;
\&  $fh\->fdopen( fileno(STDIN) );
\&  print $fh\->getline;
\&  my $content = $fh\->slurp;
\&  $fh\->close;
\&
\&  my $fh = IO::Moose::Handle\->fdopen( \e*STDERR, \*(Aq>\*(Aq );
\&  $fh\->autoflush(1);
\&  $fh\->say(\*(AqSome text\*(Aq);
\&  undef $fh;  # calls close at DESTROY
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class extends IO::Handle with following differences:
.IP "\(bu" 4
It is based on Moose object framework.
.IP "\(bu" 4
The \f(CW\*(C`stat\*(C'\fR method returns File::Stat::Moose object.
.IP "\(bu" 4
It uses Exception::Base for signaling errors. Most of methods are throwing
exception on failure.
.IP "\(bu" 4
The modifiers like \f(CW\*(C`input_record_separator\*(C'\fR are supported on per file handle
basis.
.IP "\(bu" 4
It also implements additional methods like \f(CW\*(C`say\*(C'\fR, \f(CW\*(C`slurp\*(C'\fR.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.IP "\(bu" 2
extends MooseX::GlobRef::Object
.RS 2
.IP "\(bu" 2
extends Moose::Object
.RE
.RS 2
.RE
.IP "\(bu" 2
extends IO::Handle
.SH "EXCEPTIONS"
.IX Header "EXCEPTIONS"
.IP "Exception::Argument" 4
.IX Item "Exception::Argument"
Thrown whether method is called with wrong argument.
.IP "Exception::Fatal" 4
.IX Item "Exception::Fatal"
Thrown whether fatal error is occurred by core function.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "file : Num|FileHandle|OpenHandle {ro}" 4
.IX Item "file : Num|FileHandle|OpenHandle {ro}"
File (file descriptor number, file handle or \s-1IO\s0 object) as a parameter for new
object or argument for \f(CW\*(C`fdopen\*(C'\fR method.
.ie n .IP "mode : CanonOpenModeStr {ro} = ""<""" 4
.el .IP "mode : CanonOpenModeStr {ro} = ``<''" 4
.IX Item "mode : CanonOpenModeStr {ro} = <"
File mode as a parameter for new object or argument for \f(CW\*(C`fdopen\*(C'\fR method.  Can
be Perl-style (\f(CW\*(C`<\*(C'\fR, \f(CW\*(C`>\*(C'\fR, \f(CW\*(C`>>\*(C'\fR, etc.) or C\-style (\f(CW\*(C`r\*(C'\fR,
\&\f(CW\*(C`w\*(C'\fR, \f(CW\*(C`a\*(C'\fR, etc.)
.IP "fh : GlobRef {ro}" 4
.IX Item "fh : GlobRef {ro}"
File handle used for internal \s-1IO\s0 operations.
.IP "autochomp : Bool = false {rw}" 4
.IX Item "autochomp : Bool = false {rw}"
If is true value the input will be auto chomped.
.IP "tainted : Bool = ${^TAINT} {rw}" 4
.IX Item "tainted : Bool = ${^TAINT} {rw}"
If is false value and tainted mode is enabled the \f(CW\*(C`untaint\*(C'\fR method will be
called after \f(CW\*(C`fdopen\*(C'\fR.
.IP "blocking : Bool = true {rw}" 4
.IX Item "blocking : Bool = true {rw}"
If is false value the non-blocking \s-1IO\s0 will be turned on.
.IP "copyfh : Bool = false {ro}" 4
.IX Item "copyfh : Bool = false {ro}"
If is true value the file handle will be copy of \fIfile\fR argument.  If
\&\fIfile\fR argument is not a file handle, the Exception::Argument is
thrown.
.IP "tied : Bool = true {ro}" 4
.IX Item "tied : Bool = true {ro}"
By default the object's file handle is tied variable, so it can be used with
standard, non-OO interface (\f(CW\*(C`open\*(C'\fR, \f(CW\*(C`print\*(C'\fR, \f(CW\*(C`getc\*(C'\fR functions and
\&\f(CW\*(C`<>\*(C'\fR operator).  This interface is slow and can be disabled if the \s-1OO\s0
interface only is used.
.IP "strict_accessors : Bool = false {rw}" 4
.IX Item "strict_accessors : Bool = false {rw}"
By default the accessors might be avoided for performance reason.  This
optimization can be disabled if the attribute is set to true value.
.ie n .IP "format_formfeed : Str {rw, var=""$^L""}" 4
.el .IP "format_formfeed : Str {rw, var=``$^L''}" 4
.IX Item "format_formfeed : Str {rw, var=$^L}"
.PD 0
.ie n .IP "format_line_break_characters : Str {rw, var=""$:""}" 4
.el .IP "format_line_break_characters : Str {rw, var=``$:''}" 4
.IX Item "format_line_break_characters : Str {rw, var=$:}"
.ie n .IP "input_record_separator : Str {rw, var=""$/""}" 4
.el .IP "input_record_separator : Str {rw, var=``$/''}" 4
.IX Item "input_record_separator : Str {rw, var=$/}"
.ie n .IP "output_field_separator : Str {rw, var=""$,""}" 4
.el .IP "output_field_separator : Str {rw, var=``$,''}" 4
.IX Item "output_field_separator : Str {rw, var=$,}"
.ie n .IP "output_record_separator : Str {rw, var=""$\e""}" 4
.el .IP "output_record_separator : Str {rw, var=``$\e''}" 4
.IX Item "output_record_separator : Str {rw, var=$}"
.PD
These are attributes assigned with Perl's built-in variables. See perlvar
for complete descriptions.  The fields have accessors available as per file
handle basis if called as \f(CW\*(C`$io\->accessor\*(C'\fR or as global setting if called
as \f(CW\*(C`IO::Moose::Handle\->accessor\*(C'\fR.
.SH "IMPORTS"
.IX Header "IMPORTS"
.IP "use IO::Moose::Handle '$STDIN', '$STDOUT', '$STDERR';" 4
.IX Item "use IO::Moose::Handle '$STDIN', '$STDOUT', '$STDERR';"
.PD 0
.IP "use IO::Moose::Handle ':std';" 4
.IX Item "use IO::Moose::Handle ':std';"
.IP "use IO::Moose::Handle ':all';" 4
.IX Item "use IO::Moose::Handle ':all';"
.PD
Creates handle as a copy of standard handle and imports it into caller's
namespace.  This handles won't be created until explicit import.
.Sp
.Vb 3
\&  use IO::Moose::Handle \*(Aq:std\*(Aq;
\&  print $STDOUT\->autoflush(1);
\&  print $STDIN\->slurp;
.Ve
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.IP "new( \fIargs\fR : Hash ) : Self" 4
.IX Item "new( args : Hash ) : Self"
Creates the \f(CW\*(C`IO::Moose::Handle\*(C'\fR object and calls \f(CW\*(C`fdopen\*(C'\fR method if the
\&\fImode\fR parameter is defined.
.Sp
.Vb 1
\&  $io = IO::Moose::Handle\->new( file => \e*STDIN, mode => "r" );
.Ve
.Sp
The object can be created with unopened file handle which can be opened later.
.Sp
.Vb 2
\&  $in = IO::Moose::Handle\->new( file => \e*STDIN );
\&  $in\->fdopen("r");
.Ve
.Sp
If \fIcopyfh\fR is true value and \fIfile\fR contains a file handle, this file
handle is copied rather than new file handle created.
.Sp
.Vb 2
\&  $tmp = File::Temp\->new;
\&  $io = IO::Moose::Handle\->new( file => $tmp, copyfh => 1, mode => "w" );
.Ve
.ie n .IP "new_from_fd( \fIfd\fR : Num|FileHandle|OpenHandle, \fImode\fR : CanonOpenModeStr = ""<"") : Self" 4
.el .IP "new_from_fd( \fIfd\fR : Num|FileHandle|OpenHandle, \fImode\fR : CanonOpenModeStr = ``<'') : Self" 4
.IX Item "new_from_fd( fd : Num|FileHandle|OpenHandle, mode : CanonOpenModeStr = <) : Self"
Creates the \f(CW\*(C`IO::Moose::Handle\*(C'\fR object and immediately opens the file handle
based on arguments.
.Sp
.Vb 1
\&  $out = IO::Moose::Handle\->new_from_fd( \e*STDOUT, "w" );
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "fdopen( \fIfd\fR : Num|FileHandle|OpenHandle, \fImode\fR : CanonOpenModeStr = ""<"" ) : Self" 4
.el .IP "fdopen( \fIfd\fR : Num|FileHandle|OpenHandle, \fImode\fR : CanonOpenModeStr = ``<'' ) : Self" 4
.IX Item "fdopen( fd : Num|FileHandle|OpenHandle, mode : CanonOpenModeStr = < ) : Self"
Opens the previously created file handle.  If the file was already opened, it
is closed automatically and reopened without resetting its line counter.  The
method also sets the \f(CW\*(C`file\*(C'\fR and \f(CW\*(C`mode\*(C'\fR attributes.
.Sp
.Vb 2
\&  $out = IO::Moose::Handle\->new;
\&  $out\->fdopen( \e*STDOUT, "w" );
\&
\&  $dup = IO::Moose::Handle\->new;
\&  $dup\->fdopen( $dup, "a" );
\&
\&  $stdin = IO::Moose::Handle\->new;
\&  $stdin\->fdopen( 0, "r");
.Ve
.IP "close(\fI\fR) : Self" 4
.IX Item "close() : Self"
Closes the opened file handle.  The \f(CW\*(C`file\*(C'\fR and \f(CW\*(C`mode\*(C'\fR attributes are cleared
after closing.
.IP "eof(\fI\fR) : Bool" 4
.IX Item "eof() : Bool"
.PD 0
.IP "fileno(\fI\fR) : Int" 4
.IX Item "fileno() : Int"
.IP "opened(\fI\fR) : Bool" 4
.IX Item "opened() : Bool"
.IP "print( \fIargs\fR : Array ) : Self" 4
.IX Item "print( args : Array ) : Self"
.ie n .IP "printf( \fIfmt\fR : Str = """", \fIargs\fR : Array = (\fI\fR) ) : Self" 4
.el .IP "printf( \fIfmt\fR : Str = ``'', \fIargs\fR : Array = (\fI\fR) ) : Self" 4
.IX Item "printf( fmt : Str = """", args : Array = () ) : Self"
.IP "sysread( out \fIbuf\fR, \fIlen\fR : Int, \fIoffset\fR : Int = 0 ) : Int" 4
.IX Item "sysread( out buf, len : Int, offset : Int = 0 ) : Int"
.IP "syswrite( \fIbuf\fR : Str, \fIlen\fR : Int, \fIoffset\fR : Int = 0 ) : Int" 4
.IX Item "syswrite( buf : Str, len : Int, offset : Int = 0 ) : Int"
.IP "getc(\fI\fR) : Char" 4
.IX Item "getc() : Char"
.IP "read( out \fIbuf\fR, \fIlen\fR : Int, \fIoffset\fR : Int = 0 ) : Int" 4
.IX Item "read( out buf, len : Int, offset : Int = 0 ) : Int"
.IP "truncate( \fIlen\fR : Int ) : Self" 4
.IX Item "truncate( len : Int ) : Self"
.PD
These are front ends for corresponding built-in functions.  Most of them
throws exception on failure which can be caught with try/catch:
.Sp
.Vb 10
\&  use Exception::Base;
\&  eval {
\&    open $f, "/etc/hostname";
\&    $io = IO::Moose::Handle\->new( file => $f, mode => "r" );
\&    $c = $io\->getc;
\&  };
\&  if ($@) {
\&    my $e = Exception::Base\->catch) {
\&    warn "problem with /etc/hostname file: $e";
\&  };
.Ve
.Sp
The \f(CW\*(C`fdopen\*(C'\fR, \f(CW\*(C`close\*(C'\fR, \f(CW\*(C`print\*(C'\fR, \f(CW\*(C`printf\*(C'\fR and \f(CW\*(C`truncate\*(C'\fR methods returns
this object.
.IP "write( \fIbuf\fR : Str, \fIlen\fR : Int, \fIoffset\fR : Int = 0 ) : Int" 4
.IX Item "write( buf : Str, len : Int, offset : Int = 0 ) : Int"
The opposite of \fBread\fR. The wrapper for the perl \*(L"write\*(R" in perlfunc function is called
\&\f(CW\*(C`format_write\*(C'\fR.
.IP "format_write( \fIformat_name\fR : Str ) : Self" 4
.IX Item "format_write( format_name : Str ) : Self"
The wrapper for perl \*(L"format\*(R" in perlfunc function.
.IP "readline(\fI\fR) : Maybe[Str|Array]" 4
.IX Item "readline() : Maybe[Str|Array]"
.PD 0
.IP "getline(\fI\fR) : Str" 4
.IX Item "getline() : Str"
.PD
The \f(CW\*(C`readline\*(C'\fR method which is called always in scalar context.
.Sp
.Vb 2
\&  $io = IO::Moose::Handle\->new( file=>\e*STDIN, mode=>"r" );
\&  push @a, $io\->getline;  # reads only one line
.Ve
.IP "getlines(\fI\fR) : Array" 4
.IX Item "getlines() : Array"
The \f(CW\*(C`readline\*(C'\fR method which is called always in array context.
.Sp
.Vb 2
\&  $io = IO::Moose::Handle\->new( file => \e*STDIN, mode => "r" );
\&  print scalar $io\->getlines;  # error: can\*(Aqt call in scalar context.
.Ve
.IP "ungetc( \fIord\fR : Int ) : Self" 4
.IX Item "ungetc( ord : Int ) : Self"
Pushes a character with the given ordinal value back onto the given handle's
input stream.
.Sp
.Vb 3
\&  $io = IO::Moose::Handle\->new( file => \e*STDIN, mode => "r" );
\&  $io\->ungetc(ord(\*(AqA\*(Aq));
\&  print $io\->getc;  # prints A
.Ve
.IP "say( \fIargs\fR : Array ) : Self" 4
.IX Item "say( args : Array ) : Self"
The \f(CW\*(C`print\*(C'\fR method with \s-1EOL\s0 character at the end.
.Sp
.Vb 2
\&  $io = IO::Moose::Handle\->new( file => \e*STDOUT, mode => "w" );
\&  $io\->say("Hello!");
.Ve
.IP "IO::Moose::Handle\->slurp( \fIfile\fR : Num|FileHandle|OpenHandle, \fIargs\fR : Hash ) : Str|Array" 4
.IX Item "IO::Moose::Handle->slurp( file : Num|FileHandle|OpenHandle, args : Hash ) : Str|Array"
Creates the \f(CW\*(C`IO::Moose::Handle\*(C'\fR object and returns its content as a scalar in
scalar context or as an array in array context.
.Sp
.Vb 2
\&  open $f, "/etc/passwd";
\&  $passwd_file = IO::Moose::Handle\->slurp($f);
.Ve
.Sp
Additional \fIargs\fR are passed to \f(CW\*(C`IO::Moose::Handle\*(C'\fR constructor.
.IP "slurp(\fI\fR) : Str|Array" 4
.IX Item "slurp() : Str|Array"
Reads whole file and returns its content as a scalar in scalar context or as
an array in array context (like \f(CW\*(C`getlines\*(C'\fR method).
.Sp
.Vb 1
\&  open $f, "/etc/passwd";
\&
\&  $io1 = IO::Moose::Handle\->new( file => $f, mode => "r" );
\&  $passwd_file = $io1\->slurp;
\&
\&  $io2 = IO::Moose::Handle\->new( file => $f, mode => "r" );
\&  $io2\->autochomp(1);
\&  @passwd_lines = $io2\->slurp;
.Ve
.IP "stat(\fI\fR) : File::Stat::Moose" 4
.IX Item "stat() : File::Stat::Moose"
Returns \f(CW\*(C`File::Stat::Moose\*(C'\fR object which represents status of file pointed by
current file handle.
.Sp
.Vb 4
\&  open $f, "/etc/passwd";
\&  $io = IO::Moose::Handle\->new( file => $f, mode => "r" );
\&  $st = $io\->stat;
\&  print $st\->size;  # size of /etc/passwd file
.Ve
.IP "error(\fI\fR) : Bool" 4
.IX Item "error() : Bool"
Returns true value if the file handle has experienced any errors since it was
opened or since the last call to \f(CW\*(C`clearerr\*(C'\fR, or if the handle is invalid.
.Sp
It is recommended to use exceptions mechanism to handle errors.
.IP "clearerr(\fI\fR) : Bool" 4
.IX Item "clearerr() : Bool"
Clear the given handle's error indicator.  Returns true value if the file
handle is valid or false value otherwise.
.IP "sync(\fI\fR) : Self" 4
.IX Item "sync() : Self"
Synchronizes a file's in-memory state with that on the physical medium.  It
operates on file descriptor and it is low-level operation.  Returns this
object on success or throws an exception.
.IP "flush(\fI\fR) : Self" 4
.IX Item "flush() : Self"
Flushes any buffered data at the perlio \s-1API\s0 level.  Returns self object on
success or throws an exception.
.IP "printflush( \fIargs\fR : Array ) : Self" 4
.IX Item "printflush( args : Array ) : Self"
Turns on autoflush, print \fIargs\fR and then restores the autoflush status.
Returns self object on success or throws an exception.
.IP "blocking(\fI\fR) : Bool" 4
.IX Item "blocking() : Bool"
.PD 0
.IP "blocking( \fIbool\fR : Bool ) : Bool" 4
.IX Item "blocking( bool : Bool ) : Bool"
.PD
If called with an argument blocking will turn on non-blocking \s-1IO\s0 if \fIbool\fR is
false, and turn it off if \fIbool\fR is true.  \f(CW\*(C`blocking\*(C'\fR will return the value
of the previous setting, or the current setting if \fIbool\fR is not given.
.IP "untaint(\fI\fR) : Self {rw}" 4
.IX Item "untaint() : Self {rw}"
Marks the object as taint-clean, and as such data read from it will also be
considered taint-clean.  It has meaning only if Perl is running in tainted
mode (\f(CW\*(C`\-T\*(C'\fR).
.ie n .IP "format_lines_left(\fI\fR) : Str {var=""$\-""}" 4
.el .IP "format_lines_left(\fI\fR) : Str {var=``$\-''}" 4
.IX Item "format_lines_left() : Str {var=$-}"
.PD 0
.ie n .IP "format_lines_left( \fIvalue\fR : Str ) : Str {var=""$\-""}" 4
.el .IP "format_lines_left( \fIvalue\fR : Str ) : Str {var=``$\-''}" 4
.IX Item "format_lines_left( value : Str ) : Str {var=$-}"
.ie n .IP "format_lines_per_page(\fI\fR) : Str {var=""$=""}" 4
.el .IP "format_lines_per_page(\fI\fR) : Str {var=``$=''}" 4
.IX Item "format_lines_per_page() : Str {var=$=}"
.ie n .IP "format_lines_per_page( \fIvalue\fR : Str ) : Str {var=""$=""}" 4
.el .IP "format_lines_per_page( \fIvalue\fR : Str ) : Str {var=``$=''}" 4
.IX Item "format_lines_per_page( value : Str ) : Str {var=$=}"
.ie n .IP "format_page_number(\fI\fR) : Str {var=""$%""}" 4
.el .IP "format_page_number(\fI\fR) : Str {var=``$%''}" 4
.IX Item "format_page_number() : Str {var=$%}"
.ie n .IP "format_page_number( \fIvalue\fR : Str ) : Str {var=""$%""}" 4
.el .IP "format_page_number( \fIvalue\fR : Str ) : Str {var=``$%''}" 4
.IX Item "format_page_number( value : Str ) : Str {var=$%}"
.ie n .IP "input_line_number(\fI\fR) : Str {var=""$.""}" 4
.el .IP "input_line_number(\fI\fR) : Str {var=``$.''}" 4
.IX Item "input_line_number() : Str {var=$.}"
.ie n .IP "input_line_number( \fIvalue\fR : Str ) : Str {var=""$.""}" 4
.el .IP "input_line_number( \fIvalue\fR : Str ) : Str {var=``$.''}" 4
.IX Item "input_line_number( value : Str ) : Str {var=$.}"
.ie n .IP "output_autoflush(\fI\fR) : Str {var=""$|""}" 4
.el .IP "output_autoflush(\fI\fR) : Str {var=``$|''}" 4
.IX Item "output_autoflush() : Str {var=$|}"
.ie n .IP "output_autoflush( \fIvalue\fR : Str ) : Str {var=""$|""}" 4
.el .IP "output_autoflush( \fIvalue\fR : Str ) : Str {var=``$|''}" 4
.IX Item "output_autoflush( value : Str ) : Str {var=$|}"
.ie n .IP "autoflush(\fI\fR) : Str {var=""$|""}" 4
.el .IP "autoflush(\fI\fR) : Str {var=``$|''}" 4
.IX Item "autoflush() : Str {var=$|}"
.ie n .IP "autoflush( \fIvalue\fR : Str ) : Str {var=""$|""}" 4
.el .IP "autoflush( \fIvalue\fR : Str ) : Str {var=``$|''}" 4
.IX Item "autoflush( value : Str ) : Str {var=$|}"
.ie n .IP "format_name(\fI\fR) : Str {var=""$~""}" 4
.el .IP "format_name(\fI\fR) : Str {var=``$~''}" 4
.IX Item "format_name() : Str {var=$~}"
.ie n .IP "format_name( \fIvalue\fR : Str ) : Str {var=""$~""}" 4
.el .IP "format_name( \fIvalue\fR : Str ) : Str {var=``$~''}" 4
.IX Item "format_name( value : Str ) : Str {var=$~}"
.ie n .IP "format_top_name(\fI\fR) : Str {var=""$^""}" 4
.el .IP "format_top_name(\fI\fR) : Str {var=``$^''}" 4
.IX Item "format_top_name() : Str {var=$^}"
.ie n .IP "format_top_name( \fIvalue\fR : Str ) : Str {var=""$^""}" 4
.el .IP "format_top_name( \fIvalue\fR : Str ) : Str {var=``$^''}" 4
.IX Item "format_top_name( value : Str ) : Str {var=$^}"
.PD
These are accessors assigned with Perl's built-in variables. See perlvar
for complete descriptions.
.SH "DEBUGGING"
.IX Header "DEBUGGING"
The debugging mode can be enabled if \f(CW\*(C`PERL_DEBUG_IO_MOOSE_HANDLE\*(C'\fR environment
variable is set to true value.  The debugging mode requires Smart::Comments
module.
.PP
The run-time assertions can be enabled with Test::Assert module.
.SH "INTERNALS"
.IX Header "INTERNALS"
This module uses MooseX::GlobRef::Object and stores the object's attributes
in glob reference.  They can be accessed with \f(CW\*(C`*$self\->{attr}\*(C'\fR
expression or with standard accessors \f(CW\*(C`$self\->attr\*(C'\fR.
.PP
There are two handles used for \s-1IO\s0 operations: the original handle used for
real \s-1IO\s0 operations and tied handle which hooks \s-1IO\s0 functions interface.
.PP
The OO-style uses original handle stored in \fIfh\fR field.
.PP
.Vb 2
\&  # Usage:
\&  $io\->print("OO style");
\&
\&  # Implementation:
\&  package IO::Moose::Handle;
\&  sub print {
\&      my $self = shift;
\&      CORE::print { $self\->fh } @_
\&  }
.Ve
.PP
The \s-1IO\s0 functions-style uses object reference which is dereferenced as a
handle tied to proxy object which operates on original handle.
.PP
.Vb 2
\&  # Usage:
\&  print $io "IO functions style";
\&
\&  # Implementation:
\&  package IO::Moose::Handle;
\&  sub PRINT { shift()\->print(@_) };
\&  sub print {
\&      my $self = shift;
\&      CORE::print { $self\->fh } @_
\&  }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Handle, MooseX::GlobRef::Object, Moose.
.SH "BUGS"
.IX Header "BUGS"
The \s-1API\s0 is not stable yet and can be changed in future.
.SH "AUTHOR"
.IX Header "AUTHOR"
Piotr Roszatycki <dexter@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2007, 2008, 2009 by Piotr Roszatycki <dexter@cpan.org>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
