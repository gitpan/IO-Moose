.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Moose::File 3"
.TH IO::Moose::File 3 "2009-10-29" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Moose::File \- Reimplementation of IO::File with improvements
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use IO::Moose::File;
\&  my $file = IO::Moose::File\->new( file => "/etc/passwd" );
\&  my @passwd = $file\->getlines;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides an interface mostly compatible with IO::File.  The
differences:
.IP "\(bu" 4
It is based on Moose object framework.
.IP "\(bu" 4
It uses Exception::Base for signaling errors. Most of methods are throwing
exception on failure.
.IP "\(bu" 4
It doesn't export any constants.  Use Fcntl instead.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.IP "\(bu" 2
extends IO::Moose::Seekable
.RS 2
.IP "\(bu" 2
extends IO::Moose::Handle
.RS 2
.IP "\(bu" 2
extends MooseX::GlobRef::Object
.RS 2
.IP "\(bu" 2
extends Moose::Object
.RE
.RS 2
.RE
.RE
.RS 2
.RE
.RE
.RS 2
.RE
.IP "\(bu" 2
extends IO::File
.RS 2
.IP "\(bu" 2
extends IO::Seekable
.RS 2
.IP "\(bu" 2
extends IO::Handle
.RE
.RS 2
.RE
.RE
.RS 2
.RE
.SH "EXCEPTIONS"
.IX Header "EXCEPTIONS"
.IP "Exception::Argument" 4
.IX Item "Exception::Argument"
Thrown whether method is called with wrong argument.
.IP "Exception::Fatal" 4
.IX Item "Exception::Fatal"
Thrown whether fatal error is occurred by core function.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "file : Str|FileHandle|OpenHandle {ro}" 4
.IX Item "file : Str|FileHandle|OpenHandle {ro}"
File (file name, file handle or \s-1IO\s0 object) as a parameter for new object or
\&\f(CW\*(C`open\*(C'\fR method.
.ie n .IP "mode : OpenModeWithLayerStr|CanonOpenModeStr = ""<"" {ro}" 4
.el .IP "mode : OpenModeWithLayerStr|CanonOpenModeStr = ``<'' {ro}" 4
.IX Item "mode : OpenModeWithLayerStr|CanonOpenModeStr = < {ro}"
File mode as a parameter for new object or \f(CW\*(C`open\*(C'\fR method.  Can be Perl-style
string (<, >, >>, etc.) with optional PerlIO layer after colon
(i.e. \f(CW\*(C`<:encoding(UTF\-8)\*(C'\fR) or C\-style string (\f(CW\*(C`r\*(C'\fR, \f(CW\*(C`w\*(C'\fR, \f(CW\*(C`a\*(C'\fR, etc.)
.IP "sysmode : Num {ro}" 4
.IX Item "sysmode : Num {ro}"
File mode as a parameter for new object or \f(CW\*(C`sysopen\*(C'\fR method.  Can be decimal
number (\f(CW\*(C`O_RDONLY\*(C'\fR, \f(CW\*(C`O_RDWR\*(C'\fR, \f(CW\*(C`O_CREAT\*(C'\fR, other constants from standard
module Fcntl).
.IP "perms : Num = 0666 {ro}" 4
.IX Item "perms : Num = 0666 {ro}"
Permissions to use in case a new file is created and mode was decimal number.
The permissions are always modified by umask.
.ie n .IP "layer : PerlIOLayerStr = """" {ro}" 4
.el .IP "layer : PerlIOLayerStr = ``'' {ro}" 4
.IX Item "layer : PerlIOLayerStr = """" {ro}"
PerlIO layer string.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.IP "new( \fIargs\fR : Hash ) : Self" 4
.IX Item "new( args : Hash ) : Self"
Creates an object.  If \fIfile\fR is defined and is a string or array
reference, the \f(CW\*(C`open\*(C'\fR method is called; if the open fails, the object
is destroyed.  Otherwise, it is returned to the caller.
.Sp
.Vb 2
\&  $io = IO::Moose::File\->new;
\&  $io\->open("/etc/passwd");
\&
\&  $io = IO::Moose::File\->new( file => "/var/log/perl.log", mode => "a" );
.Ve
.Sp
If \fIfile\fR is a file handler, the \f(CW\*(C`fdopen\*(C'\fR method is called.
.Sp
.Vb 2
\&  $tmp = IO::Moose::File\->new( file => \e*STDERR, mode => \*(Aqw\*(Aq );
\&  $tmp\->say("Some important message");
.Ve
.Sp
If \fIlayer\fR is defined, the \f(CW\*(C`binmode\*(C'\fR method is called.
.Sp
.Vb 1
\&  $io = IO::Moose::File\->new( file => "test.txt", layer => ":utf8" );
.Ve
.IP "new_tmpfile( \fIargs\fR : Hash ) : Self" 4
.IX Item "new_tmpfile( args : Hash ) : Self"
Creates the object with opened temporary and anonymous file for read/write.
If the temporary file cannot be created or opened, the object is destroyed.
Otherwise, it is returned to the caller.
.Sp
All \fIargs\fR will be passed to the File::Temp and IO::Moose::Handle
constructors.
.Sp
.Vb 5
\&  $io = IO::Moose::File\->new_tmpfile( UNLINK => 1, SUFFIX => \*(Aq.jpg\*(Aq );
\&  $pos = $io\->getpos;  # save position
\&  $io\->say("foo");
\&  $io\->setpos($pos);   # rewind
\&  $io\->slurp;          # prints "foo"
\&
\&  $tmp = IO::Moose::File\->new_tmpfile( output_record_separator => "\en" );
\&  $tmp\->print("say");  # with eol
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "open( \fIfile\fR : Str, \fImode\fR : OpenModeWithLayerStr|CanonOpenModeStr = ""<"" ) : Self" 4
.el .IP "open( \fIfile\fR : Str, \fImode\fR : OpenModeWithLayerStr|CanonOpenModeStr = ``<'' ) : Self" 4
.IX Item "open( file : Str, mode : OpenModeWithLayerStr|CanonOpenModeStr = < ) : Self"
Opens the \fIfile\fR with \*(L"open\*(R" in perlfunc function and returns self object.
.Sp
.Vb 2
\&  $io = IO::Moose::File\->new;
\&  $io\->open("/etc/passwd");
\&
\&  $io = IO::Moose::File\->new;
\&  $io\->open("/var/tmp/output", "w");
.Ve
.IP "sysopen( \fIfile\fR : Str, \fIsysmode\fR : Num, \fIperms\fR : Num = 0600 ) : Self" 4
.IX Item "sysopen( file : Str, sysmode : Num, perms : Num = 0600 ) : Self"
Opens the \fIfile\fR with \*(L"sysopen\*(R" in perlfunc function and returns self object.
The \fIsysmode\fR is decimal value (it can be \f(CW\*(C`O_XXX\*(C'\fR constant from standard
module Fcntl).  The default \fIperms\fR are set to \f(CW0666\fR.  The \f(CW\*(C`mode\*(C'\fR
attribute is set based on \fIsysmode\fR value.
.Sp
.Vb 4
\&  use Fcntl;
\&  $io = IO::Moose::File\->new;
\&  $io\->open("/etc/hosts", O_RDONLY);
\&  print $io\->mode;   # prints "<"
.Ve
.IP "binmode(\fI\fR) : Self" 4
.IX Item "binmode() : Self"
.PD 0
.IP "binmode( \fIlayer\fR : PerlIOLayerStr ) : Self" 4
.IX Item "binmode( layer : PerlIOLayerStr ) : Self"
.PD
Sets binmode on the underlying \s-1IO\s0 object.  On some systems (in general, \s-1DOS\s0
and Windows-based systems) binmode is necessary when you're not working with
a text file.
.Sp
It can also sets PerlIO layer (\f(CW\*(C`:bytes\*(C'\fR, \f(CW\*(C`:crlf\*(C'\fR, \f(CW\*(C`:utf8\*(C'\fR,
\&\f(CW\*(C`:encoding(XXX)\*(C'\fR, etc.). More details can be found in PerlIO::encoding.
.Sp
In general, \f(CW\*(C`binmode\*(C'\fR should be called after \f(CW\*(C`open\*(C'\fR but before any I/O is
done on the file handler.
.Sp
Returns self object.
.Sp
.Vb 2
\&  $io = IO::Moose::File\->new( file => "/tmp/picture.png", mode => "w" );
\&  $io\->binmode;
\&
\&  $io = IO::Moose::File\->new( file => "/var/tmp/fromdos.txt" );
\&  $io\->binmode(":crlf");
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::File, IO::Moose, IO::Moose::Handle, IO::Moose::Seekable,
File::Temp.
.SH "BUGS"
.IX Header "BUGS"
The \s-1API\s0 is not stable yet and can be changed in future.
.SH "AUTHOR"
.IX Header "AUTHOR"
Piotr Roszatycki <dexter@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2008, 2009 by Piotr Roszatycki <dexter@cpan.org>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
