.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::Moose::Seekable 3"
.TH IO::Moose::Seekable 3 "2009-10-29" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::Moose::Seekable \- Reimplementation of IO::Seekable with improvements
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  package My::IO;
\&  use Moose;
\&  extends \*(AqIO::Moose::Handle\*(Aq;
\&  with \*(AqIO::Moose::Seekable\*(Aq;
\&
\&  package main;
\&  my $stdin = My::IO\->new( file => \e*STDIN, mode => \*(Aqr\*(Aq );
\&  print $stdin\->slurp;
\&  print $stdin\->tell, "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class provides an interface mostly compatible with IO::Seekable.  The
differences:
.IP "\(bu" 4
It is based on Moose object framework.
.IP "\(bu" 4
It uses Exception::Base for signaling errors. Most of methods are throwing
exception on failure.
.IP "\(bu" 4
It doesn't export any constants.  Use Fcntl instead.
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.IP "\(bu" 2
extends IO::Moose::Handle
.RS 2
.IP "\(bu" 2
extends MooseX::GlobRef::Object
.RS 2
.IP "\(bu" 2
extends Moose::Object
.RE
.RS 2
.RE
.RE
.RS 2
.RE
.IP "\(bu" 2
extends IO::Seekable
.RS 2
.IP "\(bu" 2
extends IO::Handle
.RE
.RS 2
.RE
.SH "EXCEPTIONS"
.IX Header "EXCEPTIONS"
.IP "Exception::Argument" 4
.IX Item "Exception::Argument"
Thrown whether method is called with wrong argument.
.IP "Exception::Fatal" 4
.IX Item "Exception::Fatal"
Thrown whether fatal error is occurred by core function.
.SH "METHODS"
.IX Header "METHODS"
.IP "seek( \fIpos\fR : Int, \fIwhence\fR : Int ) : Self" 4
.IX Item "seek( pos : Int, whence : Int ) : Self"
Seek the file to position \fIpos\fR, relative to \fIwhence\fR:
.RS 4
.IP "\fIwhence\fR=0 (\s-1SEEK_SET\s0)" 4
.IX Item "whence=0 (SEEK_SET)"
\&\fIpos\fR is absolute position. (Seek relative to the start of the file)
.IP "\fIwhence\fR=1 (\s-1SEEK_CUR\s0)" 4
.IX Item "whence=1 (SEEK_CUR)"
\&\fIpos\fR is an offset from the current position. (Seek relative to current)
.IP "\fIwhence\fR=2 (\s-1SEEK_END\s0)" 4
.IX Item "whence=2 (SEEK_END)"
.RE
.RS 4
.Sp
\&\fIpos\fR is an offset from the end of the file. (Seek relative to end)
.Sp
The SEEK_* constants can be imported from the Fcntl module if you don't
wish to use the numbers 0, 1 or 2 in your code.  The SEEK_* constants are more
portable.
.Sp
Returns self object on success or throws an exception.
.Sp
.Vb 3
\&  use Fcntl \*(Aq:seek\*(Aq;
\&  $file\->seek(0, SEEK_END);
\&  $file\->say("*** End of file");
.Ve
.RE
.IP "sysseek( \fIpos\fR : Int, \fIwhence\fR : Int ) : Int" 4
.IX Item "sysseek( pos : Int, whence : Int ) : Int"
Uses the system call \fIlseek\fR\|(2) directly so it can be used with \fBsysread\fR and
\&\fBsyswrite\fR methods.
.Sp
Returns the new position or throws an exception.
.IP "tell(\fI\fR) : Int" 4
.IX Item "tell() : Int"
Returns the current file position, or throws an exception on error.
.IP "getpos(\fI\fR) : Int" 4
.IX Item "getpos() : Int"
Returns a value that represents the current position of the file.  This method
is implemented with \fBtell\fR method.
.IP "setpos( \fIpos\fR : Int ) : Self" 4
.IX Item "setpos( pos : Int ) : Self"
Goes to the position stored previously with \fBgetpos\fR method.  Returns this
object on success, throws an exception on failure.  This method is implemented
with \fBseek\fR method.
.Sp
.Vb 4
\&  $pos = $file\->getpos;
\&  $file\->print("something\en");
\&  $file\->setpos($pos);
\&  print $file\->readline;  # prints "something"
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Seekable, IO::Moose, IO::Moose::Handle.
.SH "BUGS"
.IX Header "BUGS"
The \s-1API\s0 is not stable yet and can be changed in future.
.SH "AUTHOR"
.IX Header "AUTHOR"
Piotr Roszatycki <dexter@cpan.org>
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2008, 2009 by Piotr Roszatycki <dexter@cpan.org>.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
